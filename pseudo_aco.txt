ALGORITHM: Ant Colony Optimization for TSP

INPUT: 
  - graph: distance matrix between nodes
  - num_ants: number of ants per iteration
  - num_iterations: number of iterations to run
  - decay: pheromone evaporation rate (0-1)
  - alpha: pheromone deposit weight

OUTPUT:
  - best_path: shortest path found
  - best_distance: length of shortest path

INITIALIZE:
  - best_path = null
  - best_distance = infinity
  - Initialize pheromone matrix with small values

FOR iteration = 1 to num_iterations:
    
    // Create and run ants
    FOR ant = 1 to num_ants:
        INITIALIZE_ANT:
            - current_node = random starting node
            - path = [current_node]
            - unvisited_nodes = all nodes except current_node
            - total_distance = 0
        
        // Construct complete tour
        WHILE unvisited_nodes is not empty:
            next_node = SELECT_NEXT_NODE()
            MOVE_TO(next_node)
        
        // Return to start to complete tour
        ADD edge from current_node to starting_node
        UPDATE total_distance
        
        // Track best solution
        IF ant.total_distance < best_distance:
            best_path = ant.path
            best_distance = ant.total_distance
    
    // Update pheromones after all ants finish
    UPDATE_PHEROMONES(all_ants)

RETURN best_path, best_distance

---

FUNCTION SELECT_NEXT_NODE():
    probabilities = array of zeros for all nodes
    
    FOR each unvisited_node:
        distance = get_distance(current_node, unvisited_node)
        pheromone = get_pheromone(current_node, unvisited_node)
        
        IF distance > 0:
            probabilities[unvisited_node] = (pheromone^2) / distance
    
    IF sum(probabilities) == 0:
        RETURN random_choice(unvisited_nodes)
    
    // Normalize probabilities
    probabilities = probabilities / sum(probabilities)
    
    // Weighted random selection
    RETURN weighted_random_choice(probabilities)

---

FUNCTION UPDATE_PHEROMONES(ants):
    // Phase 1: Evaporation (decay)
    FOR each edge in graph:
        current_pheromone = get_pheromone(edge)
        new_pheromone = current_pheromone * decay
        set_pheromone(edge, new_pheromone)
    
    // Phase 2: Reinforcement (deposit)
    FOR each ant in ants:
        FOR each edge in ant.path:
            current_pheromone = get_pheromone(edge)
            deposit = alpha / ant.total_distance
            new_pheromone = current_pheromone + deposit
            set_pheromone(edge, new_pheromone)

---

FUNCTION MOVE_TO(next_node):
    path.append(next_node)
    total_distance += get_distance(current_node, next_node)
    current_node = next_node
    unvisited_nodes.remove(next_node)